package com.agenda.omarche.agenda.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.agenda.omarche.agenda.model.Contacto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTACTO.
*/
public class ContactoDao extends AbstractDao<Contacto, Long> {

    public static final String TABLENAME = "CONTACTO";

    /**
     * Properties of entity Contacto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ContactoId = new Property(0, Long.class, "contactoId", true, "CONTACTO_ID");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property CorreoElectronico = new Property(2, String.class, "CorreoElectronico", false, "CORREO_ELECTRONICO");
        public final static Property Telefono = new Property(3, String.class, "Telefono", false, "TELEFONO");
        public final static Property Direccion = new Property(4, String.class, "Direccion", false, "DIRECCION");
        public final static Property ImagenUri = new Property(5, String.class, "imagenUri", false, "IMAGEN_URI");
    };


    public ContactoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTACTO' (" + //
                "'CONTACTO_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: contactoId
                "'NOMBRE' TEXT NOT NULL ," + // 1: Nombre
                "'CORREO_ELECTRONICO' TEXT," + // 2: CorreoElectronico
                "'TELEFONO' TEXT," + // 3: Telefono
                "'DIRECCION' TEXT," + // 4: Direccion
                "'IMAGEN_URI' TEXT);"); // 5: imagenUri
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTACTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contacto entity) {
        stmt.clearBindings();
 
        Long contactoId = entity.getContactoId();
        if (contactoId != null) {
            stmt.bindLong(1, contactoId);
        }
        stmt.bindString(2, entity.getNombre());
 
        String CorreoElectronico = entity.getCorreoElectronico();
        if (CorreoElectronico != null) {
            stmt.bindString(3, CorreoElectronico);
        }
 
        String Telefono = entity.getTelefono();
        if (Telefono != null) {
            stmt.bindString(4, Telefono);
        }
 
        String Direccion = entity.getDireccion();
        if (Direccion != null) {
            stmt.bindString(5, Direccion);
        }
 
        String imagenUri = entity.getImagenUri();
        if (imagenUri != null) {
            stmt.bindString(6, imagenUri);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contacto readEntity(Cursor cursor, int offset) {
        Contacto entity = new Contacto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // contactoId
            cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CorreoElectronico
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Telefono
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Direccion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // imagenUri
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contacto entity, int offset) {
        entity.setContactoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.getString(offset + 1));
        entity.setCorreoElectronico(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelefono(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDireccion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImagenUri(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contacto entity, long rowId) {
        entity.setContactoId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contacto entity) {
        if(entity != null) {
            return entity.getContactoId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
